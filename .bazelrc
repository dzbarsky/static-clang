build --dynamic_mode=off
# Upstream builds PIE, but it doesn't have much benefit when fully statically linked.
#build --force_pic

build --bes_results_url=https://app.buildbuddy.io/invocation/
build --bes_backend=grpcs://remote.buildbuddy.io
build --remote_cache=grpcs://remote.buildbuddy.io
build --remote_download_toplevel
build --nobuild_runfile_links
build --remote_timeout=3600
build --remote_executor=grpcs://remote.buildbuddy.io
build --jobs=500

build --extra_execution_platforms=//rbe_platform
build --host_platform=//rbe_platform

build --extra_toolchains @zig_sdk//toolchain:linux_amd64_musl
build --extra_toolchains @zig_sdk//libc_aware/toolchain:linux_arm64_musl
build --extra_toolchains @zig_sdk//libc_aware/toolchain:linux_amd64_musl
build --extra_toolchains @zig_sdk//toolchain:darwin_amd64
build --extra_toolchains @zig_sdk//toolchain:darwin_arm64
build --platforms @zig_sdk//libc_aware/platform:linux_x86_64_musl
build --experimental_platform_in_output_dir

build --incompatible_enable_cc_toolchain_resolution
build --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build --host_action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
build --incompatible_strict_action_env

build --action_env=CACHE_BUST=wxyz

build --features=thin_lto
# ThinLTO feature doesn't exist in Zig toolchain, so we must set the flags manually.
# It also doesn't support LTO on darwin targets, so we can't set this globally.
# Instead, we configure copt/linkopt inside the toolchain itself (with a WORKSPACE patch).

# Compilation Flags
build -c opt
build --strip=always
